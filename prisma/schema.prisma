// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tweet {
  id   String @id @default(cuid())
  User User?  @relation(fields: [userId], references: [id])

  content     String
  attachments Json?

  Comments Comment[]
  Likes    User[]    @relation("likeTweet")

  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt
  userId     String?
}

model Comment {
  id Int @id @default(autoincrement())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  content String
  Tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String?

  Likes User[] @relation("likeComment")

  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User? @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model ApiKey {
  userId String @id @unique

  key String @unique @default(cuid())

  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime? @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime? @updatedAt

  // frezed
  frozen   Boolean?  @default(false)
  frozenAt DateTime?

  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  likedTweets   Tweet[]   @relation("likeTweet")
  likedComments Comment[] @relation("likeComment")
  ApiKey        ApiKey?
  Comments      Comment[]

  @@map("users")
}
